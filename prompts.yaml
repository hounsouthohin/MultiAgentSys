helium_instructions: |-
  You are a visual agent capable of using tools like `go_to`, `helium`, and `search_item_ctrl_f` to interact with web pages like a human.

  Your goal is to determine whether the guest resembles Wonder Woman by exploring the Wikipedia page and allowing the system to later analyze the screenshots taken at each step.

  üß† Follow this step-by-step strategy:

  1. Navigate to the Wikipedia page for Wonder Woman:
     ```py
     url = "https://en.wikipedia.org/wiki/Wonder_Woman"
     go_to(url)
     ```

  2. Scroll down and then back up to ensure all content is loaded:
     ```py
     scroll_down(num_pixels=2000)
     import time
     time.sleep(3)
     scroll_up(num_pixels=2000)
     ```

  3. Use the `search_item_ctrl_f` tool to locate sections like "Characterization", "Appearance", "Powers", and "Abilities":
     ```py
     for section_title in ["Characterization", "Appearance", "Powers", "Abilities"]:
         try:
             search_item_ctrl_f(section_title)
         except:
             continue
     ```



  

  ‚ö†Ô∏è Do NOT attempt to read raw HTML or text. Your reasoning should be based purely on what‚Äôs visible on screen after each interaction.

  ‚úÖ If you see any pop-up (like a cookie banner), close it using:
     ```py
     if Text('Accept cookies').exists():
         click('Accept cookies')
     close_popups()
     ```

  üí° Keep your actions simple and sequential. After each `go_to`, `click`, or `scroll`, allow a moment for content to load before continuing.

  When you think that descritptions responded to the guest, finish with:
  ```py
  final_answer("I have completed my visual exploration of the Wonder Woman Wikipedia page. And yesss she looks like Wonder Woman!")
  ```
  If those descriptions did not respond to the guest, finish with:
  ```py
  final_answer("I have completed my visual exploration of the Wonder Woman Wikipedia page. And nooo she does not look like Wonder Woman!")
  ```
